# -*- coding: utf-8 -*-
"""NLP Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KY_U51k2DZCrwEbCyAKTRTUqquJD5mro

# NLP Project

U19CS028

U19CS031
"""
import nltk
nltk.download('punkt')

stemmer = nltk.PorterStemmer()

nltk.download('stopwords')
stop_words = nltk.corpus.stopwords.words('english')

import math

def assign_scores(sentences):
  sentence_freq = {}
  scores = {}
  for sentence in sentences:
    words = nltk.word_tokenize(sentence)
    words_seen = set()
    for word in words:
      if word in stop_words:
        continue
      stemmed_word = stemmer.stem(word)
      if stemmed_word in  words_seen:
        continue
      if sentence_freq.__contains__(stemmed_word):
        sentence_freq[stemmed_word]+=1
      else:
        sentence_freq[stemmed_word]=1
      words_seen.add(stemmed_word)

  for sentence in sentences:
    freq = {}
    words = nltk.word_tokenize(sentence)
    score = 0
    for word in words:
      stemmed_word = stemmer.stem(word)
      if not sentence_freq.__contains__(stemmed_word):
        continue
      if freq.__contains__(stemmed_word):
        freq[stemmed_word]+=1
      else:
        freq[stemmed_word]=1
    for word in words:
      stemmed_word = stemmer.stem(word)
      if not sentence_freq.__contains__(stemmed_word):
        continue
      score += freq[stemmed_word] * math.log(len(sentences) / sentence_freq[stemmed_word])
    scores[sentence] = score
  return scores

def summ(text):
    scored_sentences = assign_scores(nltk.sent_tokenize(text))
    sentence_scores = {v: k for k, v in scored_sentences.items()}
    scores_only = list(sentence_scores.keys())
    scores_only.sort()
    scores_only = scores_only[-5:]
    summary = ""
    for score in sentence_scores:
        if score in scores_only:
            summary = summary.__add__("\n").__add__(sentence_scores[score])
    return summary